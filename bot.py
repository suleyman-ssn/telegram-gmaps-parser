import os
import time  
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from dotenv import load_dotenv

load_dotenv()

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

CHOOSING_LANGUAGE, CHOOSING_CATEGORY, CHOOSING_LOCATION = range(3)


class GoogleParser:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = 'https://maps.googleapis.com/maps/api/place'

    def text_search(self, query, location_name, language):
        """–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥—É"""
        url = f'{self.base_url}/textsearch/json'
        params = {
            'query': f'{query} in {location_name}',
            'key': self.api_key,
            'language': language
        }
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ text search: {e}")
            return None

    def nearby_search(self, query, lat, lng, language, radius_meters=5000):
        """–ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º)"""
        url = f'{self.base_url}/nearbysearch/json'
        params = {
            'location': f'{lat},{lng}',
            'radius': radius_meters,
            'keyword': query,
            'key': self.api_key,
            'language': language
        }
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ nearby search: {e}")
            return None

    def place_details(self, place_id, language):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
        url = f'{self.base_url}/details/json'
        params = {
            'place_id': place_id,
            'fields': 'name,formatted_phone_number,formatted_address,website,rating,url,geometry',
            'key': self.api_key,
            'language': language
        }
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ details: {e}")
            return None

    def next_page(self, token):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        time.sleep(2)
        url = f'{self.base_url}/nearbysearch/json'
        params = {
            'pagetoken': token,
            'key': self.api_key
        }
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ next_page: {e}")
            return None


parser = GoogleParser(GOOGLE_API_KEY)



async def _build_results_keyboard(context: ContextTypes.DEFAULT_TYPE, results: list, lang: str) -> InlineKeyboardMarkup:
    """
    –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    places_keyboard = []
    
    for place in results[:20]:
        name = place.get('name', 'Unnamed')
        place_id = place['place_id']
        places_keyboard.append([
            InlineKeyboardButton(name, callback_data=f"details_{place_id}")
        ])

    nav_keyboard = []
    next_page_token = context.user_data.get('next_page_token')
    
    if next_page_token:
        nav_keyboard.append(
            InlineKeyboardButton(
                "–ù–∞–π—Ç–∏ –µ—â–µ ‚¨áÔ∏è" if lang == 'ru' else "Find More ‚¨áÔ∏è",
                callback_data="find_more"
            )
        )
    
    nav_keyboard.append(
        InlineKeyboardButton(
            "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ üîç" if lang == 'ru' else "New Search üîç",
            callback_data="new_search"
        )
    )
    
    return InlineKeyboardMarkup(places_keyboard + [nav_keyboard])



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞."""
    context.user_data.clear()
    
    keyboard = [["–†—É—Å—Å–∫–∏–π üá∑üá∫", "English üá¨üáß"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "üåç Please choose a language / –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        reply_markup=reply_markup
    )
    return CHOOSING_LANGUAGE


async def language_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: –í—ã–±—Ä–∞–Ω —è–∑—ã–∫, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
    lang_text = update.message.text
    context.user_data['lang'] = 'ru' if "–†—É—Å" in lang_text else 'en'
    lang = context.user_data['lang']

    if lang == 'ru':
        await update.message.reply_text(
            "üîç –û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–ø—Ç–µ–∫–∞, –∫–∞—Ñ–µ, –∞–≤—Ç–æ–º–æ–π–∫–∞):",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            "üîç Great! Enter a category to search for (e.g. pharmacy, car wash, cafe):",
            reply_markup=ReplyKeyboardRemove()
        )
    return CHOOSING_CATEGORY


async def category_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2: –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ."""
    context.user_data['category'] = update.message.text
    lang = context.user_data['lang']

    if lang == 'ru':
        text = "üó∫Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞—Ä–∏–∂') –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º:"
        btn_text = "üìç –ù–∞–π—Ç–∏ —Ä—è–¥–æ–º —Å–æ –º–Ω–æ–π"
    else:
        text = "üó∫Ô∏è Now enter a city (e.g., 'Paris') or send your location to find nearby:"
        btn_text = "üìç Find Near Me"

    keyboard = [[KeyboardButton(btn_text, request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–ù–∞–ø—Ä: –ê–ª–º–∞—Ç—ã")

    await update.message.reply_text(text, reply_markup=reply_markup)
    return CHOOSING_LOCATION


async def location_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–æ –º–µ—Å—Ç–æ. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    category = context.user_data['category']
    lang = context.user_data['lang']
    data = None

    if update.message.location:
        context.user_data['last_search_type'] = 'nearby'
        context.user_data['last_location'] = (update.message.location.latitude, update.message.location.longitude)
        
        loc = update.message.location
        await update.message.reply_text(
            "üîÑ –ò—â—É —Ä—è–¥–æ–º —Å –≤–∞–º–∏..." if lang == 'ru' else "üîÑ Searching near you...",
            reply_markup=ReplyKeyboardRemove()
        )
        data = parser.nearby_search(category, loc.latitude, loc.longitude, lang)

    elif update.message.text:
        context.user_data['last_search_type'] = 'text'
        context.user_data['last_location'] = update.message.text
        
        full_location = update.message.text
        await update.message.reply_text(
            f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫: '{category}' –≤ '{full_location}'..." if lang == 'ru' else f"üîÑ Searching for: '{category}' in '{full_location}'...",
            reply_markup=ReplyKeyboardRemove()
        )
        data = parser.text_search(category, full_location, lang)

    if not data or data.get('status') != 'OK' or not data.get('results'):
        msg = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ API." if lang == 'ru' else "‚ùå Nothing found or API error."
        await update.message.reply_text(msg)
        return ConversationHandler.END

    context.user_data['last_results'] = data.get('results', [])
    context.user_data['next_page_token'] = data.get('next_page_token')

    results = context.user_data['last_results']
    if not results:
        msg = "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ." if lang == 'ru' else "‚ùå Nothing found for your query."
        await update.message.reply_text(msg)
        return ConversationHandler.END
    
    reply_markup = await _build_results_keyboard(context, results, lang)
    msg = "‚úÖ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π):" if lang == 'ru' else "‚úÖ Here's what I found (click for details):"
    await update.message.reply_text(msg, reply_markup=reply_markup)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    lang = context.user_data.get('lang', 'ru')
    msg = "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start" if lang == 'ru' else "‚ùå Operation cancelled. To start again, use /start"
    await update.message.reply_text(msg, reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END



async def place_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –º–µ—Å—Ç–æ. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".
    –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()

    place_id = query.data.split('_', 1)[1]
    lang = context.user_data.get('lang', 'ru')

    details = parser.place_details(place_id, lang)

    if not details or details.get('status') != 'OK':
        await query.edit_message_text(text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π" if lang == 'ru' else "Error getting details")
        return

    result = details.get('result', {})
    name = result.get('name', '...')
    phone = result.get('formatted_phone_number', '')
    address = result.get('formatted_address', '')
    rating = result.get('rating', '')
    google_url = result.get('url', '')

    text_parts = [f"üìç *{name}*"]
    if rating: text_parts.append(f"‚≠ê {rating} / 5.0")
    if phone: text_parts.append(f"üìû `{phone}`")
    if address: text_parts.append(f"üó∫Ô∏è {address}")

    message_text = "\n\n".join(text_parts)

    keyboard = []
    if google_url:
        keyboard.append([
            InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps" if lang == 'ru' else "Open in Google Maps",
                url=google_url
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" if lang == 'ru' else "‚¨ÖÔ∏è Back to list",
            callback_data="back_to_list"
        )
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)

    
    old_map_msg_id = context.user_data.pop('last_map_message_id', None)
    if old_map_msg_id:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=old_map_msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç—É: {e}")

    loc = result.get('geometry', {}).get('location', {})
    if loc:
        try:
            map_message = await query.message.reply_location(latitude=loc['lat'], longitude=loc['lng'])
            context.user_data['last_map_message_id'] = map_message.message_id
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é: {e}")
    
    await query.edit_message_text(
        text=message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def back_to_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ.
    """
    query = update.callback_query
    await query.answer()
    
    lang = context.user_data.get('lang', 'ru')
    results = context.user_data.get('last_results', [])

    map_msg_id = context.user_data.pop('last_map_message_id', None)
    if map_msg_id:
        try:
            await context.bot.delete_message(chat_id=query.message.chat_id, message_id=map_msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É: {e}")

    if not results:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ /start" if lang == 'ru' else "Error: results list lost. Start a new search /start")
        return

    reply_markup = await _build_results_keyboard(context, results, lang)
    msg = "‚úÖ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π):" if lang == 'ru' else "‚úÖ Here's what I found (click for details):"
    
    await query.edit_message_text(text=msg, reply_markup=reply_markup)

async def find_more_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    query = update.callback_query
    lang = context.user_data.get('lang', 'ru')
    token = context.user_data.get('next_page_token')

    if not token:
        await query.answer(text="–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç" if lang == 'ru' else "No more results", show_alert=True)
        return

    await query.answer(text="–ó–∞–≥—Ä—É–∂–∞—é..." if lang == 'ru' else "Loading...")
    
    data = parser.next_page(token)

    if not data or data.get('status') != 'OK' or not data.get('results'):
        await query.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏." if lang == 'ru' else "Error loading results.")
        context.user_data['next_page_token'] = None 
        return

    context.user_data['last_results'] = data.get('results', [])
    context.user_data['next_page_token'] = data.get('next_page_token')
    
    results = context.user_data['last_results']

    reply_markup = await _build_results_keyboard(context, results, lang)
    msg = "‚úÖ –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:" if lang == 'ru' else "‚úÖ Next page of results:"
    
    await query.edit_message_text(text=msg, reply_markup=reply_markup)


async def new_search_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.
    """
    query = update.callback_query
    lang = context.user_data.get('lang', 'ru')
    await query.answer()

    msg = "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start" if lang == 'ru' else "To start a new search, send /start"
    
    await query.edit_message_text(text=msg)
    context.user_data.clear() 



def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, language_chosen)],
            CHOOSING_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_chosen)],
            CHOOSING_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND | filters.LOCATION, location_chosen)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    
    application.add_handler(CallbackQueryHandler(back_to_list_callback, pattern=r'^back_to_list$'))
    application.add_handler(CallbackQueryHandler(find_more_callback, pattern=r'^find_more$'))
    application.add_handler(CallbackQueryHandler(new_search_callback, pattern=r'^new_search$'))
    application.add_handler(CallbackQueryHandler(place_details_callback, pattern=r'^details_'))
    
    application.add_handler(CommandHandler('cancel', cancel))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()